<pre class='metadata'>
Title: Runtime Keys
Shortname: runtime-keys
Level: 1
Status: w3c/CG-DRAFT
Group: wintercg
URL: http://runtime-keys.proposal.wintercg.org
Editor: Ethan Arrowood, Vercel http://vercel.com, ethan-arrowood@vercel.com
Abstract: A proposal defining standard identifier keys for various runtime environments
Markup Shorthands: markdown yes
</pre>
<pre class=link-defaults>
spec:url; type:interface; text:URL
spec:html; type:attribute; for:Window; text:navigator
spec:html; type:attribute; for:Window; text:self
</pre>

Introduction {#intro}
=====================

This proposal defines a list of keys that represent various runtime environments. These keys can be used in a variety of ways, and should be considered a reliable representation of the given runtime. For example, they may be used in a project configuration file to indicate the given project supports the specified runtime. This specification does not detail <i>how</i> the keys can be used; that is left up to community developed tools. The point of this proposal is too only define <i>what</i> the keys are in order to prevent conflicts and give users a reliable list of platforms they can build tooling around.

Keys {#keys}
============

## Cloudlfare - workerd ## {#workerd}

The JavaScript / Wasm runtime that powers Cloudflare Workers.

Key: `workerd`

Website: [https://workers.cloudflare.com/](https://workers.cloudflare.com/)

Repository: [https://github.com/cloudflare/workerd](https://github.com/cloudflare/workerd)

## Deno Land - Deno ## {#deno}

A modern runtime for JavaScript and TypeScript.

Key: `deno`

Website: [https://deno.com](https://deno.com)

Repository: [https://github.com/denoland/deno](https://github.com/denoland/deno)

## Meta - React Native ## {#react-native}

Create native apps for Android and iOS using React.

Key: `react-native`

Website: [https://reactnative.dev/](https://reactnative.dev/)

Repository: [https://github.com/facebook/react-native](https://github.com/facebook/react-native)

## Netlify - Edge Functions ## {#}

Edge Functions connect the Netlify platform and workflow with an open runtime standard at the network edge.

Key: `TODO: <key>`

Website: [https://docs.netlify.com/edge-functions/overview/](https://docs.netlify.com/edge-functions/overview/)

Repository: [https://github.com/netlify/edge-functions](https://github.com/netlify/edge-functions)

## OpenJS Foundation - Electron ## {#electron}

Build cross-platform desktop apps with JavaScript, HTML, and CSS.

Key: `electron`

Website: [https://www.electronjs.org/](https://www.electronjs.org/)

Repository: [https://github.com/electron/electron](https://github.com/electron/electron)

## OpenJS Foundation - Node.js ## {#node}

Node.js is an open-source, cross-platform JavaScript runtime environment.

Key: `node`

Website: [https://nodejs.org](https://nodejs.org)

Repository: [https://github.com/nodejs/node](https://github.com/nodejs/node)

## Oven - Bun ## {#bun}

Incredibly fast JavaScript runtime, bundler, transpiler and package manager - all in one.

Key: `bun`

Website: [https://bun.sh/](https://bun.sh/)

Repository: [https://github.com/oven-sh/bun](https://github.com/oven-sh/bun)

## Vercel - Edge Runtime ## {#edge}

Developing, testing, and defining the runtime Web APIs for Edge infrastructure.

Key: `edge`

Website: [https://edge-runtime.vercel.app/](https://edge-runtime.vercel.app/)

Repository: [https://github.com/vercel/edge-runtime](https://github.com/vercel/edge-runtime)

<!-- 
## <Runtime Name> ## {#<Runtime Key>}

<Runtime Description>

Key: `<Runtime Key>`

Website: [<Runtime Website>](<Runtime Website>)

Repository: [<Runtime Repository>](<Runtime Repository>)
-->

Key Management {#key-management}
================================

## Adding a key ## {#adding-a-key}

All JavaScript runtimes are welcome to create a key and add it to this list. New keys must not conflict with another existing key. Runtime entries on this list are encouraged, but not required, to participate in the community group.

To propose a new key, create a pull request in [runtime-keys](https://github.com/wintercg/runtime-keys) repository that adds the desired key to the `index.bs` file using the following format:

```md
## <Runtime Organization> - <Runtime Name> ## {#<Runtime Key>}

<Runtime Description>

Key: \`<Runtime Key>\`

Website: [<Runtime Website>](<Runtime Website>)

Repository: [<Runtime Repository>](<Runtime Repository>)
```

The key should be inserted in alphabetical order based on the first character of the Runtime Organization

Keys should meaningfully represent the relative runtime and be a simple, string-like value so it can be used in common configuration formats such as JSON and YAML.

Entry pull requests must be approved by at least two active members of the community group that are not directly affiliated with the proposed runtime.

## Modifying a key ## {#modifying-a-key}

Modifying an entry requires opening a pull request and recieving two approvals from active community group members not affiliated with the relative runtime project.

Modifications can be made to aspects such as the Organization, Name, Description, Website, and Repository. Aside from extraordinary circumstances, to prevent breaking tools built around this list, <b>Keys are not modifiable</b>. Keys may be deprecated to indicate inactive runtime projects.

Deprecated Keys may be undeprecated and claimed by another runtime.

To deprecate or undeprecate a key, open a pull request adding or removing `<b>[Deprecated]</b>` from the Name:

```diff
+ ## <b>[Deprecated]</b> <Runtime Organization> - <Runtime Name> ## {#<Runtime Key>}
- ## <Runtime Organization> - <Runtime Name> ## {#<Runtime Key>}
```